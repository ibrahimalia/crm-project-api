// <auto-generated />
using System;
using Meta.IntroApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Meta.IntroApp.Migrations
{
    [DbContext(typeof(MetaITechDbContext))]
    [Migration("20210714111026_repaireTimeSheetModel")]
    partial class repaireTimeSheetModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Meta.IntroApp.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationCodeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCodeConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Meta.IntroApp.AccountClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Meta.IntroApp.AccountLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins");
                });

            modelBuilder.Entity("Meta.IntroApp.AccountRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Meta.IntroApp.AccountToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.MobFeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("MerchantId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.MobRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("subServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("subServiceId");

                    b.ToTable("MobRequests");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJAddressType");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJAttachements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJAttachements");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PRJContactsId")
                        .HasColumnType("int");

                    b.Property<int?>("PRJJobPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("PRJContactsId");

                    b.HasIndex("PRJJobPositionId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("PRJContacts");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJInvolvementLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJInvolvementLevel");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJJobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJJobPosition");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PRJProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("PRJProjectId");

                    b.HasIndex("ProjectCategoryId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProject");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProjectCategory");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectFollowers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PRJProjectRole")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectLevelId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("PRJProjectRole");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectLevelId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProjectFollowers");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectFollowerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("ProjectFollowerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProjectHistory");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProjectRole");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJProjectStatus");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTAG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJTAG");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DuetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<int>("IsMajor")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PRJTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PRJTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJTask");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PRJTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskLevelId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("PRJTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.HasIndex("TaskLevelId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJTaskFollower");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PRJTaskFollowerId")
                        .HasColumnType("int");

                    b.Property<int>("PRJTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("PRJTaskFollowerId");

                    b.HasIndex("PRJTaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJTaskHistory");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsArchive")
                        .HasColumnType("int");

                    b.Property<string>("MobMerchantMerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MobMerchantMerchantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PRJTaskStatus");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MerchantID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MerchantID");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("PRJTimeSheet");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAbout", b =>
                {
                    b.Property<int>("AboutUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutUsId");

                    b.HasIndex(new[] { "MerchantId" }, "MERCHANT_FK");

                    b.ToTable("MOB_ABOUT");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WorkPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "B_FK_idx");

                    b.HasIndex(new[] { "ClientId" }, "CLIENT_APPOINTMENT_FK_idx");

                    b.HasIndex(new[] { "MerchantId" }, "M_FK_idx");

                    b.HasIndex(new[] { "WorkPlanId" }, "W_P_APPOINTMENT_idx");

                    b.ToTable("MOB_APPOINTMENT");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAppointmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppointmentId" }, "APPOINTMENT_FK_idx");

                    b.HasIndex(new[] { "StaffId" }, "STAFF_FK_idx");

                    b.HasIndex(new[] { "SubServiceId" }, "SU_SERVICE_FK_idx");

                    b.ToTable("MOB_APPOINTMENT_DETAILES");
                });

            modelBuilder.Entity("Meta.IntroApp.MobBranch", b =>
                {
                    b.Property<int>("BranchesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchesId");

                    b.HasIndex(new[] { "MerchantId" }, "USER_FK");

                    b.ToTable("MOB_BRANCH");
                });

            modelBuilder.Entity("Meta.IntroApp.MobContact", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactUsId");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_ID_CONTACT");

                    b.HasIndex(new[] { "MerchantId" }, "USER_CONTACT_FK");

                    b.ToTable("MOB_CONTACT");
                });

            modelBuilder.Entity("Meta.IntroApp.MobGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MOB_GALLERY");
                });

            modelBuilder.Entity("Meta.IntroApp.MobGlobalTheme", b =>
                {
                    b.Property<int>("MobGlobalThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackGroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("FontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GallerySlider")
                        .HasColumnType("bit");

                    b.Property<string>("GlobalColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LayoutOrder")
                        .HasColumnType("int");

                    b.Property<string>("LogoImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainSlider")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NavBarColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewsSlider")
                        .HasColumnType("bit");

                    b.Property<bool>("ProjectSlider")
                        .HasColumnType("bit");

                    b.Property<bool>("ServicesSlider")
                        .HasColumnType("bit");

                    b.Property<string>("SideBarColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SplashScreenColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SplashScreenTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MobGlobalThemeId");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_THEME");

                    b.HasIndex(new[] { "MerchantId" }, "USER_THEME_FK");

                    b.ToTable("MOB_GLOBAL_THEME");
                });

            modelBuilder.Entity("Meta.IntroApp.MobImage", b =>
                {
                    b.Property<int>("ImagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AboutUsId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchesId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactUsId")
                        .HasColumnType("int");

                    b.Property<string>("DataBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("IsCover")
                        .HasColumnType("int");

                    b.Property<int?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImagesId");

                    b.HasIndex(new[] { "BranchesId" }, "BRANCH_FK");

                    b.HasIndex(new[] { "NewsId" }, "NEWS_FK");

                    b.HasIndex(new[] { "ProjectId" }, "PROJECT");

                    b.HasIndex(new[] { "ServiceId" }, "SERVICE_FK");

                    b.HasIndex(new[] { "SubServiceId" }, "SUB_SERVICE_FK");

                    b.ToTable("MOB_IMAGE");
                });

            modelBuilder.Entity("Meta.IntroApp.MobMerchant", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("MerchantName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MerchantId");

                    b.ToTable("MOB_MERCHANT");
                });

            modelBuilder.Entity("Meta.IntroApp.MobNews", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_ID_NEWS");

                    b.HasIndex(new[] { "MerchantId" }, "USER_NEWS_FK");

                    b.ToTable("MOB_NEWS");
                });

            modelBuilder.Entity("Meta.IntroApp.MobOurTeam", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_ID_EMPLOYEE");

                    b.HasIndex(new[] { "MerchantId" }, "MERCHANT_EMPLOYEE_FK");

                    b.ToTable("MOB_OUR_TEAM");
                });

            modelBuilder.Entity("Meta.IntroApp.MobProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_ID");

                    b.HasIndex(new[] { "MerchantId" }, "PROJECT_MERCHANT_FK");

                    b.ToTable("MOB_PROJECT");
                });

            modelBuilder.Entity("Meta.IntroApp.MobService", b =>
                {
                    b.Property<int>("ServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicesId");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_ID_SERVICES");

                    b.HasIndex(new[] { "MerchantId" }, "SERVICE_MERCHANT_FK");

                    b.ToTable("MOB_SERVICE");
                });

            modelBuilder.Entity("Meta.IntroApp.MobSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("IsFeatured")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MOB_SLIDERS");
                });

            modelBuilder.Entity("Meta.IntroApp.MobStaffServiceAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("SubServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StaffId" }, "STAFF_FK_idx")
                        .HasDatabaseName("STAFF_FK_idx1");

                    b.HasIndex(new[] { "SubServiceId" }, "S_SERVICE_FK_idx");

                    b.ToTable("MOB_STAFF_SERVICE_ASSIGN");
                });

            modelBuilder.Entity("Meta.IntroApp.MobSubService", b =>
                {
                    b.Property<int>("SubServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubServicesId");

                    b.HasIndex(new[] { "ServiceId" }, "SERVICE_ID");

                    b.ToTable("MOB_SUB_SERVICE");
                });

            modelBuilder.Entity("Meta.IntroApp.MobWorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstWorkTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstWorkTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SecondWorkTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondWorkTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ToDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "BRANCH_PLAN_FK_idx");

                    b.HasIndex(new[] { "MerchantId" }, "MERCHANT_PLAN_FK_idx");

                    b.ToTable("MOB_WORK_PLAN");
                });

            modelBuilder.Entity("Meta.IntroApp.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Meta.IntroApp.RoleCalim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Meta.IntroApp.Account", b =>
                {
                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("Accounts")
                        .HasForeignKey("MerchantId");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.AccountClaim", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meta.IntroApp.AccountLogin", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meta.IntroApp.AccountRole", b =>
                {
                    b.HasOne("Meta.IntroApp.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meta.IntroApp.AccountToken", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.MobFeedBack", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "Accounts")
                        .WithMany("FeedBacks")
                        .HasForeignKey("AccountsId");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobFeedBacks")
                        .HasForeignKey("MerchantId");

                    b.Navigation("Accounts");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.MobRequest", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "Accounts")
                        .WithMany("MobRequests")
                        .HasForeignKey("AccountsId");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobRequests")
                        .HasForeignKey("MerchantId");

                    b.HasOne("Meta.IntroApp.MobSubService", "SubService")
                        .WithMany("MobRequest")
                        .HasForeignKey("subServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Merchant");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJAddressType", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("AddressType")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJAttachements", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("Attachements")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProject", "Project")
                        .WithMany("Attachements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJTask", "Task")
                        .WithMany("Attachements")
                        .HasForeignKey("TaskId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("Project");

                    b.Navigation("Task");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJContacts", b =>
                {
                    b.HasOne("Meta.IntroApp.DbModels.PRJAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("Contacts")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJContacts", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PRJContactsId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJJobPosition", "JobPosition")
                        .WithMany("Contacts")
                        .HasForeignKey("PRJJobPositionId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Meta.IntroApp.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AddressType");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("JobPosition");

                    b.Navigation("UpdatedByAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJInvolvementLevel", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("InvolvementLevel")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJJobPosition", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("JobPosition")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProject", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("Project")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProject", null)
                        .WithMany("Projects")
                        .HasForeignKey("PRJProjectId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectStatus");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectCategory", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("ProjectCategory")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectFollowers", b =>
                {
                    b.HasOne("Meta.IntroApp.DbModels.PRJContacts", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("ProjectFollowers")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("PRJProjectRole");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProject", "Project")
                        .WithMany("ProjectFollowers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJInvolvementLevel", "ProjectLevel")
                        .WithMany()
                        .HasForeignKey("ProjectLevelId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Contact");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("Project");

                    b.Navigation("ProjectLevel");

                    b.Navigation("ProjectRole");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectHistory", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("ProjectHistory")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectFollowers", "ProjectFollower")
                        .WithMany("ProjectHistories")
                        .HasForeignKey("ProjectFollowerId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("ProjectFollower");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectRole", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("ProjectRole")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectStatus", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("ProjectStatus")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTAG", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("Tag")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTask", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("Task")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTaskFollower", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTask", null)
                        .WithMany("Tasks")
                        .HasForeignKey("PRJTaskId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJProject", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("Owner");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("TaskStatus");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskFollower", b =>
                {
                    b.HasOne("Meta.IntroApp.DbModels.PRJContacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("TaskFollower")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTask", null)
                        .WithMany("TaskFollowers")
                        .HasForeignKey("PRJTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJInvolvementLevel", "TaskLevel")
                        .WithMany()
                        .HasForeignKey("TaskLevelId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Contacts");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("TaskLevel");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskHistory", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("TaskHistory")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTaskFollower", null)
                        .WithMany("TaskHistories")
                        .HasForeignKey("PRJTaskFollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.DbModels.PRJTask", null)
                        .WithMany("TasktHistories")
                        .HasForeignKey("PRJTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskStatus", b =>
                {
                    b.HasOne("Meta.IntroApp.Account", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Meta.IntroApp.MobMerchant", null)
                        .WithMany("TaskStatus")
                        .HasForeignKey("MobMerchantMerchantId");

                    b.HasOne("Meta.IntroApp.Account", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTimeSheet", b =>
                {
                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("TimeSheets")
                        .HasForeignKey("MerchantID");

                    b.HasOne("Meta.IntroApp.DbModels.PRJTask", "Task")
                        .WithMany("TimeSheets")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Merchant");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAbout", b =>
                {
                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobAbouts")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("MERCHANT_FK");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAppointment", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobAppointments")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("B_FK");

                    b.HasOne("Meta.IntroApp.Account", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("CLIENT_APPOINTMENT_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobAppointments")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("M_FK");

                    b.HasOne("Meta.IntroApp.MobWorkPlan", "WorkPlan")
                        .WithMany("MobAppointments")
                        .HasForeignKey("WorkPlanId")
                        .HasConstraintName("W_P_APPOINTMENT");

                    b.Navigation("Branch");

                    b.Navigation("Client");

                    b.Navigation("Merchant");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAppointmentDetails", b =>
                {
                    b.HasOne("Meta.IntroApp.MobAppointment", "Appointment")
                        .WithMany("MobAppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("APPOINTMENT_FK");

                    b.HasOne("Meta.IntroApp.MobSubService", "SubService")
                        .WithMany("MobAppointmentDetailes")
                        .HasForeignKey("SubServiceId")
                        .HasConstraintName("SU_SERVICE_FK");

                    b.Navigation("Appointment");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("Meta.IntroApp.MobBranch", b =>
                {
                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobBranches")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("USER_FK");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobContact", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobContacts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_ID_CONTACT");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobContacts")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("USER_CONTACT_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobGlobalTheme", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobGlobalThemes")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_THEME")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobGlobalThemes")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("USER_THEME_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobImage", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branches")
                        .WithMany("MobImages")
                        .HasForeignKey("BranchesId")
                        .HasConstraintName("BRANCH_FK");

                    b.HasOne("Meta.IntroApp.MobNews", "News")
                        .WithMany("MobImages")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("NEWS_FK");

                    b.HasOne("Meta.IntroApp.MobProject", "Project")
                        .WithMany("MobImages")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("PROJECT");

                    b.HasOne("Meta.IntroApp.MobService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Meta.IntroApp.MobSubService", "SubService")
                        .WithMany("MobImages")
                        .HasForeignKey("SubServiceId")
                        .HasConstraintName("SUB_SERVICE_FK");

                    b.Navigation("Branches");

                    b.Navigation("News");

                    b.Navigation("Project");

                    b.Navigation("Service");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("Meta.IntroApp.MobNews", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobNews")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_ID_NEWS");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobNews")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("USER_NEWS_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobOurTeam", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobOurTeams")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_ID_EMPLOYEE");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobOurTeams")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("MERCHANT_EMPLOYEE_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobProject", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobProjects")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_ID");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobProjects")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("PROJECT_MERCHANT_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobService", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobServices")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_ID_SERVICES");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobServices")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("SERVICE_MERCHANT_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.MobStaffServiceAssign", b =>
                {
                    b.HasOne("Meta.IntroApp.MobOurTeam", "Staff")
                        .WithMany("MobStaffServiceAssigns")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("STAFF_FK");

                    b.HasOne("Meta.IntroApp.MobSubService", "SubService")
                        .WithMany("MobStaffServiceAssigns")
                        .HasForeignKey("SubServiceId")
                        .HasConstraintName("S_SERVICE_FK");

                    b.Navigation("Staff");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("Meta.IntroApp.MobSubService", b =>
                {
                    b.HasOne("Meta.IntroApp.MobService", "Service")
                        .WithMany("MobSubServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("SERVICE_ID");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Meta.IntroApp.MobWorkPlan", b =>
                {
                    b.HasOne("Meta.IntroApp.MobBranch", "Branch")
                        .WithMany("MobWorkPlans")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("BRANCH_PLAN_FK");

                    b.HasOne("Meta.IntroApp.MobMerchant", "Merchant")
                        .WithMany("MobWorkPlans")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("MERCHANT_PLAN_FK");

                    b.Navigation("Branch");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Meta.IntroApp.RoleCalim", b =>
                {
                    b.HasOne("Meta.IntroApp.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meta.IntroApp.Account", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FeedBacks");

                    b.Navigation("MobRequests");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJContacts", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJJobPosition", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProject", b =>
                {
                    b.Navigation("Attachements");

                    b.Navigation("ProjectFollowers");

                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJProjectFollowers", b =>
                {
                    b.Navigation("ProjectHistories");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTask", b =>
                {
                    b.Navigation("Attachements");

                    b.Navigation("TaskFollowers");

                    b.Navigation("Tasks");

                    b.Navigation("TasktHistories");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("Meta.IntroApp.DbModels.PRJTaskFollower", b =>
                {
                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("Meta.IntroApp.MobAppointment", b =>
                {
                    b.Navigation("MobAppointmentDetails");
                });

            modelBuilder.Entity("Meta.IntroApp.MobBranch", b =>
                {
                    b.Navigation("MobAppointments");

                    b.Navigation("MobContacts");

                    b.Navigation("MobGlobalThemes");

                    b.Navigation("MobImages");

                    b.Navigation("MobNews");

                    b.Navigation("MobOurTeams");

                    b.Navigation("MobProjects");

                    b.Navigation("MobServices");

                    b.Navigation("MobWorkPlans");
                });

            modelBuilder.Entity("Meta.IntroApp.MobMerchant", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AddressType");

                    b.Navigation("Attachements");

                    b.Navigation("Contacts");

                    b.Navigation("InvolvementLevel");

                    b.Navigation("JobPosition");

                    b.Navigation("MobAbouts");

                    b.Navigation("MobAppointments");

                    b.Navigation("MobBranches");

                    b.Navigation("MobContacts");

                    b.Navigation("MobFeedBacks");

                    b.Navigation("MobGlobalThemes");

                    b.Navigation("MobNews");

                    b.Navigation("MobOurTeams");

                    b.Navigation("MobProjects");

                    b.Navigation("MobRequests");

                    b.Navigation("MobServices");

                    b.Navigation("MobWorkPlans");

                    b.Navigation("Project");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectFollowers");

                    b.Navigation("ProjectHistory");

                    b.Navigation("ProjectRole");

                    b.Navigation("ProjectStatus");

                    b.Navigation("Tag");

                    b.Navigation("Task");

                    b.Navigation("TaskFollower");

                    b.Navigation("TaskHistory");

                    b.Navigation("TaskStatus");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("Meta.IntroApp.MobNews", b =>
                {
                    b.Navigation("MobImages");
                });

            modelBuilder.Entity("Meta.IntroApp.MobOurTeam", b =>
                {
                    b.Navigation("MobStaffServiceAssigns");
                });

            modelBuilder.Entity("Meta.IntroApp.MobProject", b =>
                {
                    b.Navigation("MobImages");
                });

            modelBuilder.Entity("Meta.IntroApp.MobService", b =>
                {
                    b.Navigation("MobSubServices");
                });

            modelBuilder.Entity("Meta.IntroApp.MobSubService", b =>
                {
                    b.Navigation("MobAppointmentDetailes");

                    b.Navigation("MobImages");

                    b.Navigation("MobRequest");

                    b.Navigation("MobStaffServiceAssigns");
                });

            modelBuilder.Entity("Meta.IntroApp.MobWorkPlan", b =>
                {
                    b.Navigation("MobAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
